#!/usr/bin/php
<?php 
/*
 * Copyright (C) 2013-2014 RuneAudio Team
 * http://www.runeaudio.com
 *
 * RuneUI
 * copyright (C) 2013-2014 - Andrea Coiutti (aka ACX) & Simone De Gregori (aka Orion)
 *
 * RuneOS
 * copyright (C) 2013-2014 - Simone De Gregori (aka Orion) & Carmelo San Giovanni (aka Um3ggh1U)
 *
 * RuneAudio website and logo
 * copyright (C) 2013-2014 - ACX webdesign (Andrea Coiutti)
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RuneAudio; see the file COPYING.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.txt>.
 *
 *  file: command/rune_PL_wrk
 *  version: 1.3
 *  coder: Simone De Gregori
 *
 */
 
// common include
ini_set('display_errors', '1');
ini_set('error_reporting', -1);
ini_set('error_log','/var/log/runeaudio/rune_PL_wrk.log');
// Connect to Redis backend
$redis = new Redis();
$redis->connect('127.0.0.1', 6379);
include('/var/www/app/libs/runeaudio.php');
// reset worker logfile
sysCmd('echo "--------------- start: rune_PL_wrk ---------------" > /var/log/runeaudio/rune_PL_wrk.log');
runelog("WORKER rune_PL_wrk START",'');
// reset forceupdate state
$forceupdate = 1;
// --- WORKER MAIN LOOP --- //
while (1) {
runelog("rune_PL_wrk: open MPD local UNIX socket",'');
$mpd = openMpdSocket('/run/mpd.sock') ;
if (!$mpd) {
// exit script
// die();
$forceupdate = 1;
sleep(1);

} else {
	if ($forceupdate !== 0) {
		$forceupdate = 0;
		runelog('----------------------------------- FORCE UPDATE -----------------------------------');
		ui_update($redis,$mpd);
	}
$status = _parseStatusResponse(MpdStatus($mpd));

// store next songid in PHP SESSION
$redis->set('nextsongid',$status['nextsongid']);
// store "lastsongid" in PHP SESSION
$redis->set('lastsongid',$status['songid']);
		$redis->set('pl_length',$status['playlistlength']);
		// check for Ramplay
		// if ($redis->get('ramplay') === '1') {
			// check ramplay delete
				// if (!rp_checkPLid($_SESSION['lastsongid'],$mpd)) {
				// rp_deleteFile($_SESSION['lastsongid'],$mpd);
				// }
			// check for CMediaFix
			// if ($redis->get('cmediafix') === '1') {
			// $redis->set('lastbitdepth',$status['audio']);
			// }
		// }
		
// idle LOOP
runelog("rune_PL_wrk: enter idle loop",'');
$status = monitorMpdState($mpd);
// idle LOOP
		
		$redis->set('pl_length',$status['playlistlength']);
		// runelog('---------status data------------',$status);
		$status = ui_status($mpd,$status);
		// runelog('---------status data(2)------------',$status);
		
			// render Queue (push async)
			// if ($status['changed'] === 'playlist') {
			// $queue = new ui_renderQueue($mpd);
			// $queue->start();
			// runelog('---------------- PLAYLIST RENDER ----------------');
			// }
		
		// CMediaFix
		if ($redis->get('cmediafix') === '1' && $status['state'] === 'play' ) {
			$status['lastbitdepth'] = $redis->get('lastbitdepth');
				if ($redis->get('lastbitdepth') !== $status['audio']) {
					sendMpdCommand($mpd,'cmediafix');
				}
		}
		
		// Ramplay
		// if ($redis->get('ramplay') === '1') {
				// set consume mode ON
				// if ($status['consume'] == 0) {
				// sendMpdCommand($mpd,'consume 1');
				// $status['consume'] = 1;
				// }

			// copy track in /dev/shm
			// $path = rp_copyFile($status['nextsongid'],$mpd);
			// exec update mdp locazione ramplay
			// rp_updateFolder($mpd);
			// exec addandplay track
			// rp_addPlay($path,$mpd,$status['playlistlength']);
		// }
		
		// Global Random
		if (($redis->get('globalrandom') === '1') && ($redis->get('lastsongid') != $status['songid']) && ($redis->get('globalrandom_lock') === '0')) {
			$addsong = new globalRandom($status);
			$addsong->start();
			$redis->set('globalrandom_lock', 1);
		} else {
			$redis->set('globalrandom_lock', 0);
		}
		
// JSON response for GUI
runelog("rune_PL_wrk: ui_render() response",json_encode($status));
ui_render('playback',json_encode($status));
runelog("rune_PL_wrk: close MPD local UNIX socket",'');
closeMpdSocket($mpd);
}
// --- WORKER MAIN LOOP --- //
}
